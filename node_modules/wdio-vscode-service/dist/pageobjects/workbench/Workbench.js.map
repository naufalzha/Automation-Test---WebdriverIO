{"version":3,"file":"Workbench.js","sourceRoot":"","sources":["../../../src/pageobjects/workbench/Workbench.ts"],"names":[],"mappings":"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","sourcesContent":["import { TitleBar } from '../menu/TitleBar'\nimport { SideBarView } from '../sidebar/SideBarView'\nimport { ActivityBar } from '../activityBar/ActivityBar'\nimport { StatusBar } from '../statusBar/StatusBar'\nimport { EditorView } from '../editor/EditorView'\nimport { BottomBarPanel } from '../bottomBar/BottomBarPanel'\nimport { Notification, StandaloneNotification } from './Notification'\nimport { NotificationsCenter } from './NotificationsCenter'\nimport { QuickOpenBox, InputBox } from './Input'\nimport { SettingsEditor } from '../editor/SettingsEditor'\n\nimport { PageDecorator, IPageDecorator, BasePage } from '../utils'\nimport { Workbench as WorkbenchLocators } from '../../locators/1.61.0'\n\nexport interface Workbench extends IPageDecorator<typeof WorkbenchLocators> {}\n/**\n * Page object representing the custom VSCode title bar\n *\n * @category Workbench\n */\n@PageDecorator(WorkbenchLocators)\nexport class Workbench extends BasePage<typeof WorkbenchLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'Workbench' as const\n\n    /**\n     * Get a title bar handle\n     */\n    getTitleBar (): TitleBar {\n        return new TitleBar(this.locatorMap)\n    }\n\n    /**\n     * Get a side bar handle\n     */\n    getSideBar (): SideBarView<any> {\n        return new SideBarView<any>(this.locatorMap)\n    }\n\n    /**\n     * Get an activity bar handle\n     */\n    getActivityBar (): ActivityBar {\n        return new ActivityBar(this.locatorMap)\n    }\n\n    /**\n     * Get a status bar handle\n     */\n    getStatusBar (): StatusBar {\n        return new StatusBar(this.locatorMap)\n    }\n\n    /**\n     * Get a bottom bar handle\n     */\n    getBottomBar (): BottomBarPanel {\n        return new BottomBarPanel(this.locatorMap)\n    }\n\n    /**\n     * Get a handle for the editor view\n     */\n    getEditorView (): EditorView {\n        return new EditorView(this.locatorMap)\n    }\n\n    /**\n     * Get all standalone notifications (notifications outside the notifications center)\n     * @returns Promise resolving to array of Notification objects\n     */\n    async getNotifications (): Promise<Notification[]> {\n        const notifications: Notification[] = []\n        const containers = await this.notificationContainer$$\n\n        if (containers.length === 0) {\n            return []\n        }\n\n        for (const container of containers) {\n            const elements = await container.$$(this.locators.notificationItem)\n\n            for (const element of elements) {\n                notifications.push(\n                    await new StandaloneNotification(\n                        this.locatorMap,\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                        element as any\n                    ).wait()\n                )\n            }\n        }\n\n        return notifications\n    }\n\n    /**\n     * Verifies if any notifications are shown\n     * @returns true if workbench has notifications, false otherwise\n     */\n    hasNotifications (): Promise<boolean> {\n        return this.notificationContainer$.isExisting()\n    }\n\n    /**\n     * Opens the notifications center\n     * @returns Promise resolving to NotificationsCenter object\n     */\n    openNotificationsCenter (): Promise<NotificationsCenter> {\n        const statusBar = new StatusBar(this.locatorMap)\n        return statusBar.openNotificationsCenter()\n    }\n\n    /**\n     * Opens the settings editor\n     *\n     * @returns promise that resolves to a SettingsEditor instance\n     */\n    async openSettings (): Promise<SettingsEditor> {\n        await this.executeCommand('open user settings')\n        await new EditorView(this.locatorMap).openEditor('Settings')\n        await this.elem.$(this.locatorMap.Editor.elem as string).waitForExist()\n        await new Promise((res) => setTimeout(res, 500))\n        return new SettingsEditor(this.locatorMap)\n    }\n\n    /**\n     * Open the VS Code command line prompt\n     * @returns Promise resolving to InputBox (vscode 1.44+) or QuickOpenBox (vscode up to 1.43) object\n     */\n    async openCommandPrompt (): Promise<QuickOpenBox | InputBox> {\n        const editorView = await new EditorView(this.locatorMap).wait()\n        const webview = await editorView.webView$$\n        if (webview.length > 0) {\n            const tab = await editorView.getActiveTab()\n            if (tab) {\n                await tab.elem.addValue(['F1'])\n                const inputBox = new InputBox(this.locatorMap).wait()\n                return inputBox\n            }\n        }\n        await browser.keys(['F1'])\n        if (await browser.getVSCodeChannel() === 'vscode' && await browser.getVSCodeVersion() >= '1.44.0') {\n            return new InputBox(this.locatorMap).wait()\n        }\n        return new QuickOpenBox(this.locatorMap).wait()\n    }\n\n    /**\n     * Open the command prompt, type in a command and execute\n     * @param command text of the command to be executed\n     * @returns Promise resolving when the command prompt is confirmed\n     */\n    async executeCommand (command: string): Promise<void> {\n        const prompt = await this.openCommandPrompt()\n        await prompt.setText(`>${command}`)\n        await prompt.confirm()\n    }\n}\n"]}