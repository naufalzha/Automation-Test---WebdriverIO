{"version":3,"file":"launcher.js","sourceRoot":"","sources":["../src/launcher.ts"],"names":[],"mappings":";;;;;AAAA,4CAAmB;AACnB,2DAA4B;AAC5B,gDAAuB;AACvB,+BAA6B;AAE7B,wDAAqC;AACrC,0DAAiC;AACjC,mCAAgC;AAChC,yDAAgD;AAChD,6CAAgD;AAChD,yEAAmF;AAGnF,mCAAqD;AACrD,2CAGoB;AAsBpB,MAAM,YAAY,GAAG,cAAc,CAAA;AACnC,MAAM,GAAG,GAAG,IAAA,gBAAM,EAAC,8BAA8B,CAAC,CAAA;AAClD,MAAqB,qBAAsB,SAAQ,oCAA2B;IAG1E,YACY,QAAwB,EAChC,YAAuC,EACvC,MAA0B;QAE1B,KAAK,CAAC,QAAQ,EAAE,YAAY,EAAE,MAAM,CAAC,CAAA;QAJ7B,aAAQ,GAAR,QAAQ,CAAgB;QAKhC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,IAAI,8BAAkB,CAAA;QAC/D,4CAA4C;QAC5C,IAAI,CAAC,gBAAgB,GAAG,GAAG,EAAE,GAAE,CAAC,CAAA;IACpC,CAAC;IAED,KAAK,CAAC,SAAS,CAAE,CAAQ,EAAE,YAA6C;QACpE,MAAM,IAAI,GAAyB,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC;YAC1D,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAE,CAAkC,CAAC,WAAW,IAAI,CAAC,CAAuB,CAAC;YACvG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,YAAkC,CAAC,CAAA;QAElF;;;WAGG;QACH,MAAM,gBAAgB,GAAG,cAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,CAAA;QACjE,MAAM,iBAAiB,GAAG,MAAM,IAAA,iBAAS,EAAC,gBAAgB,CAAC,CAAA;QAE3D,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;YACpB;;eAEG;YACH,IAAI,OAAO,GAAG,CAAC,WAAW,KAAK,QAAQ,IAAI,GAAG,CAAC,WAAW,CAAC,WAAW,EAAE,KAAK,QAAQ,EAAE;gBACnF,SAAQ;aACX;YAED,IAAI,CAAC,GAAG,CAAC,iCAAqB,CAAC,EAAE;gBAC7B,GAAG,CAAC,iCAAqB,CAAC,GAAkB,EAAE,CAAA;aACjD;YAED,MAAM,OAAO,GAAG,GAAG,CAAC,cAAc,IAAI,2BAAe,CAAA;YACrD,IAAI,iBAAiB,EAAE;gBACnB,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,kBAAE,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAa,CAAA;gBACxF,MAAM,gBAAgB,GAAG,cAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,gBAAgB,OAAO,CAAC,OAAO,CAAC,EAAE,YAAY,EAAE,CAAC,CAAA;gBACrG,MAAM,UAAU,GAAG,CACf,GAAG,CAAC,iCAAqB,CAAC,EAAE,MAAM;uBAC/B,cAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,CAAC,CAC1F,CAAA;gBAED,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,MAAM,IAAA,iBAAS,EAAC,gBAAgB,CAAC,IAAI,MAAM,IAAA,iBAAS,EAAC,UAAU,CAAC,EAAE;oBACtF,GAAG,CAAC,IAAI,CACJ,0CAA0C,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,GAAG;0BACnE,qBAAqB,OAAO,CAAC,OAAO,CAAC,EAAE,YAAY,gBAAgB,CACxE,CAAA;oBAED,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,CAAA;oBAChC,GAAG,CAAC,iCAAqB,CAAE,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAE,CAAC,MAAM,CAAC,CAAA;oBACtF,IAAI,CAAC,sBAAsB,GAAG,gBAAgB,CAAA;oBAC9C,SAAQ;iBACX;aACJ;YAED,MAAM,CAAC,aAAa,EAAE,mBAAmB,EAAE,gBAAgB,CAAC,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAA;YACrG,IAAI,CAAC,sBAAsB,GAAG,gBAAgB,CAAA;YAC9C,MAAM,WAAW,GAAsB;gBACnC,YAAY,EAAE,EAAE,OAAO,EAAE,mBAAmB,EAAE,IAAI,EAAE,gBAAgB,EAAE;gBACtE,MAAM,EAAE;oBACJ,OAAO,EAAE,aAAa;oBACtB,IAAI,EAAE,GAAG,CAAC,iCAAqB,CAAC,EAAE,MAAM,IAAI,MAAM,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC;iBACrF;aACJ,CAAA;YACD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,CAAA;YAChC,GAAG,CAAC,iCAAqB,CAAE,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAA;YAC5D,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,WAAW,EAAE,iBAAiB,CAAC,CAAA;SACzE;QAED,OAAO,KAAK,CAAC,SAAS,EAAE,CAAA;IAC5B,CAAC;IAED;;;;;OAKG;IACK,KAAK,CAAC,kBAAkB,CAAE,qBAA6B;QAC3D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,CAAA;QAErE,IAAI;YACA,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAA;YAEzE,GAAG,CAAC,IAAI,CAAC,2BAA2B,mBAAmB,GAAG,CAAC,CAAA;YAC3D,MAAM,IAAA,kBAAc,EAChB,IAAA,aAAM,EAAC,sCAA0B,EAAE,mBAAmB,EAAE,IAAA,wBAAgB,GAAE,CAAC,EAC3E,IAAI,CAAC,UAAU,EACf,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,CAC9B,CAAA;YAED,MAAM,GAAG,GAAG,YAAE,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAA;YACzD,MAAM,gBAAgB,GAAG,cAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,gBAAgB,mBAAmB,GAAG,GAAG,EAAE,CAAC,CAAA;YAChG,MAAM,kBAAE,CAAC,MAAM,CAAC,cAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,eAAe,GAAG,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAA;YAEnF;;eAEG;YACH,OAAO,OAAO,KAAK,MAAM;gBACrB,CAAC,CAAC,CAAC,qBAAqB,EAAE,mBAAmB,EAAE,gBAAgB,CAAC;gBAChE,CAAC,CAAC,CAAC,OAAO,EAAE,mBAAmB,EAAE,gBAAgB,CAAC,CAAA;SACzD;QAAC,OAAO,GAAQ,EAAE;YACf,MAAM,IAAI,gCAAkB,CAAC,gCAAgC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAA;SAC9E;IACL,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,YAAY,CAAE,OAAe;QACvC,IAAI;YACA,GAAG,CAAC,IAAI,CAAC,oBAAoB,OAAO,GAAG,CAAC,CAAA;YACxC,OAAO,MAAM,IAAA,wBAAQ,EAAC;gBAClB,SAAS,EAAE,IAAI,CAAC,UAAU;gBAC1B,OAAO;aACV,CAAC,CAAA;SACL;QAAC,OAAO,GAAQ,EAAE;YACf,MAAM,IAAI,gCAAkB,CAAC,2BAA2B,GAAG,CAAC,OAAO,EAAE,CAAC,CAAA;SACzE;IACL,CAAC;IAED;;;;;OAKG;IACK,KAAK,CAAC,mBAAmB,CAAE,qBAAuC;QACtE,IAAI,qBAAqB,KAAK,UAAU,EAAE;YACtC,OAAO,MAAM,CAAA;SAChB;QAED,IAAI;YACA,GAAG,CAAC,IAAI,CAAC,uBAAuB,2BAAe,EAAE,CAAC,CAAA;YAClD,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAA,gBAAO,EAAC,2BAAe,EAAE,EAAE,CAAC,CAAA;YAC7D,MAAM,iBAAiB,GAAa,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;YAEzD,IAAI,qBAAqB,EAAE;gBACvB;;mBAEG;gBACH,MAAM,wBAAwB,GAAG,qBAAqB,KAAK,QAAQ;oBAC/D,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;oBACtB,CAAC,CAAC,qBAAqB,CAAA;gBAC3B,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,wBAAwB,CAAC,EAAE;oBACvD,MAAM,IAAI,KAAK,CACX,oBAAoB,wBAAwB,wCAAwC;0BAClF,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,2BAAe,EAAE,CAC7E,CAAA;iBACJ;gBAED,OAAO,wBAAwB,CAAA;aAClC;YAED,OAAO,iBAAiB,CAAC,CAAC,CAAC,CAAA;SAC9B;QAAC,OAAO,GAAQ,EAAE;YACf,MAAM,IAAI,gCAAkB,CAAC,iCAAiC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAA;SAC/E;IACL,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,yBAAyB,CAAE,aAAqB;QAC1D,IAAI;YACA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAA,gBAAO,EAAC,IAAA,aAAM,EAAC,+BAAmB,EAAE,aAAa,CAAC,EAAE,EAAE,CAAC,CAAA;YAC9E,MAAM,QAAQ,GAAa,MAAM,IAAI,CAAC,IAAI,EAAE,CAAA;YAC5C,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,KAAK,UAAU,CAAC,CAAA;YAE7F,MAAM,EAAE,IAAI,EAAE,mBAAmB,EAAE,GAAG,MAAM,IAAA,gBAAO,EAC/C,IAAA,aAAM,EAAC,iCAAqB,EAAE,QAAS,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAC9D,EAAE,CACL,CAAA;YACD,OAAO,MAAM,mBAAmB,CAAC,IAAI,EAAE,CAAA;SAC1C;QAAC,OAAO,GAAQ,EAAE;YACf,MAAM,IAAI,gCAAkB,CAAC,wCAAwC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAA;SACtF;IACL,CAAC;IAEO,KAAK,CAAC,kBAAkB,CAAE,OAAe,EAAE,WAA8B,EAAE,iBAA0B;QACzG,MAAM,UAAU,GAAa;YACzB,CAAC,OAAO,CAAC,EAAE;gBACP,YAAY,EAAE,WAAW,CAAC,YAAY,CAAC,OAAO;gBAC9C,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,OAAO;aACrC;SACJ,CAAA;QACD,MAAM,eAAe,GAAG,cAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,CAAA;QAChE,IAAI,CAAC,iBAAiB,EAAE;YACpB,OAAO,kBAAE,CAAC,SAAS,CACf,eAAe,EACf,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,EACnC,OAAO,CACV,CAAA;SACJ;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,kBAAE,CAAC,QAAQ,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAA;QACpF,OAAO,kBAAE,CAAC,SAAS,CACf,eAAe,EACf,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,OAAO,EAAE,GAAG,UAAU,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,EACtD,OAAO,CACV,CAAA;IACL,CAAC;CACJ;AAnND,wCAmNC","sourcesContent":["import os from 'os'\nimport fs from 'fs/promises'\nimport path from 'path'\nimport { format } from 'util'\n\nimport downloadBundle from 'download'\nimport logger from '@wdio/logger'\nimport { request } from 'undici'\nimport { download } from '@vscode/test-electron'\nimport { SevereServiceError } from 'webdriverio'\nimport { launcher as ChromedriverServiceLauncher } from 'wdio-chromedriver-service'\nimport type { Options, Capabilities } from '@wdio/types'\n\nimport { validatePlatform, fileExist } from './utils'\nimport {\n    DEFAULT_CHANNEL, VSCODE_RELEASES, VSCODE_MANIFEST_URL, CHROMEDRIVER_RELEASES,\n    CHROMEDRIVER_DOWNLOAD_PATH, DEFAULT_CACHE_PATH, VSCODE_CAPABILITY_KEY\n} from './constants'\nimport type {\n    ServiceOptions, ServiceCapability, VSCodeCapabilities, VSCodeOptions\n} from './types'\n\ninterface BundeInformation {\n    chromedriver: string\n    vscode: string\n}\ninterface Manifest {\n    registrations: Registration[]\n}\ninterface Registration {\n    version: string\n    component: {\n        git: {\n            name: string\n        }\n    }\n}\ntype Versions = { [desiredVersion: string]: BundeInformation | undefined }\n\nconst VERSIONS_TXT = 'versions.txt'\nconst log = logger('wdio-vscode-service/launcher')\nexport default class VSCodeServiceLauncher extends ChromedriverServiceLauncher {\n    private _cachePath: string\n\n    constructor (\n        private _options: ServiceOptions,\n        capabilities: Capabilities.Capabilities,\n        config: Options.Testrunner\n    ) {\n        super(_options, capabilities, config)\n        this._cachePath = this._options.cachePath || DEFAULT_CACHE_PATH\n        // @ts-expect-error overwrite private method\n        this._mapCapabilities = () => {}\n    }\n\n    async onPrepare (_: never, capabilities: Capabilities.RemoteCapabilities) {\n        const caps: VSCodeCapabilities[] = Array.isArray(capabilities)\n            ? capabilities.map((c) => ((c as Capabilities.W3CCapabilities).alwaysMatch || c) as VSCodeCapabilities)\n            : Object.values(capabilities).map((c) => c.capabilities as VSCodeCapabilities)\n\n        /**\n         * check if for given version we already have all bundles\n         * and continue without download if possible\n         */\n        const versionsFilePath = path.join(this._cachePath, VERSIONS_TXT)\n        const versionsFileExist = await fileExist(versionsFilePath)\n\n        for (const cap of caps) {\n            /**\n             * skip setup if user is not using VSCode as capability\n             */\n            if (typeof cap.browserName !== 'string' || cap.browserName.toLowerCase() !== 'vscode') {\n                continue\n            }\n\n            if (!cap[VSCODE_CAPABILITY_KEY]) {\n                cap[VSCODE_CAPABILITY_KEY] = <VSCodeOptions>{}\n            }\n\n            const version = cap.browserVersion || DEFAULT_CHANNEL\n            if (versionsFileExist) {\n                const content = JSON.parse((await fs.readFile(versionsFilePath)).toString()) as Versions\n                const chromedriverPath = path.join(this._cachePath, `chromedriver-${content[version]?.chromedriver}`)\n                const vscodePath = (\n                    cap[VSCODE_CAPABILITY_KEY]?.binary\n                    || path.join(this._cachePath, `vscode-${process.platform}-${content[version]?.vscode}`)\n                )\n\n                if (content[version] && await fileExist(chromedriverPath) && await fileExist(vscodePath)) {\n                    log.info(\n                        `Skipping download, bundles for VSCode v${content[version]?.vscode} `\n                        + `and Chromedriver v${content[version]?.chromedriver} already exist`\n                    )\n\n                    Object.assign(cap, this.options)\n                    cap[VSCODE_CAPABILITY_KEY]!.binary = await this._setupVSCode(content[version]!.vscode)\n                    this.chromedriverCustomPath = chromedriverPath\n                    continue\n                }\n            }\n\n            const [vscodeVersion, chromedriverVersion, chromedriverPath] = await this._setupChromedriver(version)\n            this.chromedriverCustomPath = chromedriverPath\n            const serviceArgs: ServiceCapability = {\n                chromedriver: { version: chromedriverVersion, path: chromedriverPath },\n                vscode: {\n                    version: vscodeVersion,\n                    path: cap[VSCODE_CAPABILITY_KEY]?.binary || await this._setupVSCode(vscodeVersion)\n                }\n            }\n            Object.assign(cap, this.options)\n            cap[VSCODE_CAPABILITY_KEY]!.binary = serviceArgs.vscode.path\n            await this._updateVersionsTxt(version, serviceArgs, versionsFileExist)\n        }\n\n        return super.onPrepare()\n    }\n\n    /**\n     * Downloads Chromedriver bundle for given VSCode version\n     * @param desiredReleaseChannel either release channel (e.g. \"stable\" or \"insiders\")\n     *                              or a concrete version e.g. 1.66.0\n     * @returns \"insiders\" if `desiredReleaseChannel` is set to this otherwise a concrete version\n     */\n    private async _setupChromedriver (desiredReleaseChannel: string) {\n        const version = await this._fetchVSCodeVersion(desiredReleaseChannel)\n\n        try {\n            const chromedriverVersion = await this._fetchChromedriverVersion(version)\n\n            log.info(`Download Chromedriver (v${chromedriverVersion})`)\n            await downloadBundle(\n                format(CHROMEDRIVER_DOWNLOAD_PATH, chromedriverVersion, validatePlatform()),\n                this._cachePath,\n                { extract: true, strip: 1 }\n            )\n\n            const ext = os.platform().startsWith('win') ? '.exe' : ''\n            const chromedriverPath = path.join(this._cachePath, `chromedriver-${chromedriverVersion}${ext}`)\n            await fs.rename(path.join(this._cachePath, `chromedriver${ext}`), chromedriverPath)\n\n            /**\n             * return 'insiders' if desired release channel\n             */\n            return version === 'main'\n                ? [desiredReleaseChannel, chromedriverVersion, chromedriverPath]\n                : [version, chromedriverVersion, chromedriverPath]\n        } catch (err: any) {\n            throw new SevereServiceError(`Couldn't set up Chromedriver ${err.message}`)\n        }\n    }\n\n    /**\n     * Download VSCode bundle\n     * @param version VSCode version\n     * @returns path to downloaded VSCode bundle\n     */\n    private async _setupVSCode (version: string) {\n        try {\n            log.info(`Download VSCode (${version})`)\n            return await download({\n                cachePath: this._cachePath,\n                version\n            })\n        } catch (err: any) {\n            throw new SevereServiceError(`Couldn't set up VSCode: ${err.message}`)\n        }\n    }\n\n    /**\n     * Get VSCode version based on desired channel or validate version if provided\n     * @param desiredReleaseChannel either release channel (e.g. \"stable\" or \"insiders\")\n     *                              or a concrete version e.g. 1.66.0\n     * @returns \"main\" if `desiredReleaseChannel` is \"insiders\" otherwise a concrete VSCode version\n     */\n    private async _fetchVSCodeVersion (desiredReleaseChannel?: string | string) {\n        if (desiredReleaseChannel === 'insiders') {\n            return 'main'\n        }\n\n        try {\n            log.info(`Fetch releases from ${VSCODE_RELEASES}`)\n            const { body: versions } = await request(VSCODE_RELEASES, {})\n            const availableVersions: string[] = await versions.json()\n\n            if (desiredReleaseChannel) {\n                /**\n                 * validate provided VSCode version\n                 */\n                const newDesiredReleaseChannel = desiredReleaseChannel === 'stable'\n                    ? availableVersions[0]\n                    : desiredReleaseChannel\n                if (!availableVersions.includes(newDesiredReleaseChannel)) {\n                    throw new Error(\n                        `Desired version \"${newDesiredReleaseChannel}\" is not existent, available versions:`\n                        + `${availableVersions.slice(0, 5).join(', ')}..., see ${VSCODE_RELEASES}`\n                    )\n                }\n\n                return newDesiredReleaseChannel\n            }\n\n            return availableVersions[0]\n        } catch (err: any) {\n            throw new SevereServiceError(`Couldn't fetch latest VSCode: ${err.message}`)\n        }\n    }\n\n    /**\n     * Fetches required Chromedriver version for given VSCode version\n     * @param vscodeVersion branch or tag version of VSCode repository\n     * @returns required Chromedriver version\n     */\n    private async _fetchChromedriverVersion (vscodeVersion: string) {\n        try {\n            const { body } = await request(format(VSCODE_MANIFEST_URL, vscodeVersion), {})\n            const manifest: Manifest = await body.json()\n            const chromium = manifest.registrations.find((r: any) => r.component.git.name === 'chromium')\n\n            const { body: chromedriverVersion } = await request(\n                format(CHROMEDRIVER_RELEASES, chromium!.version.split('.')[0]),\n                {}\n            )\n            return await chromedriverVersion.text()\n        } catch (err: any) {\n            throw new SevereServiceError(`Couldn't fetch Chromedriver version: ${err.message}`)\n        }\n    }\n\n    private async _updateVersionsTxt (version: string, serviceArgs: ServiceCapability, versionsFileExist: boolean) {\n        const newContent: Versions = {\n            [version]: {\n                chromedriver: serviceArgs.chromedriver.version,\n                vscode: serviceArgs.vscode.version\n            }\n        }\n        const versionsTxtPath = path.join(this._cachePath, VERSIONS_TXT)\n        if (!versionsFileExist) {\n            return fs.writeFile(\n                versionsTxtPath,\n                JSON.stringify(newContent, null, 4),\n                'utf-8'\n            )\n        }\n\n        const content = JSON.parse((await fs.readFile(versionsTxtPath, 'utf-8')).toString())\n        return fs.writeFile(\n            versionsTxtPath,\n            JSON.stringify({ ...content, ...newContent }, null, 4),\n            'utf-8'\n        )\n    }\n}\n"]}