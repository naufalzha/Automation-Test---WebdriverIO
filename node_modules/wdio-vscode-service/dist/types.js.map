{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { ChromedriverServiceOptions } from 'wdio-chromedriver-service'\nimport type { Capabilities } from '@wdio/types'\nimport type { VSCODE_CAPABILITY_KEY } from './constants'\n\n/**\n * extend WebdriverIO capabilities object\n */\nexport interface WDIOVSCodeServiceOptions {\n    [VSCODE_CAPABILITY_KEY]?: VSCodeOptions\n}\n\nexport interface VSCodeCapabilities extends Capabilities.Capabilities, WDIOVSCodeServiceOptions {}\n\n/**\n * Settings to handle VSCode Proxy API\n */\nexport interface VSCodeProxyOptions {\n    /**\n     * If set to true, the service tries to establish a connection with the\n     * VSCode workbench to enable access to the VSCode API\n     * @default true\n     */\n    enable: boolean\n    /**\n     * Port of the WebSocket connection used to connect to the workbench.\n     * By default set to an available port in your operating system.\n     */\n    port?: number\n    /**\n     * Timeout for connecting to WebSocket inside of VSCode\n     * @default 5000\n     */\n    connectionTimeout?: number\n    /**\n     * Timeout for command to be executed within VSCode\n     * @default 5000\n     */\n    commandTimeout?: number\n}\n\nexport type ArgsParams = Record<string, string | boolean>\n\n/**\n * wdio-vscode-service options\n */\nexport interface ServiceOptions extends ChromedriverServiceOptions {\n    /**\n     * Define a cache path to avoid re-downloading all bundles\n     */\n    cachePath?: string\n}\n\nexport interface BundleInformation {\n    version: string\n    path: string\n}\n\nexport interface ServiceCapability {\n    vscode: BundleInformation\n    chromedriver: BundleInformation\n}\n\n/**\n * Options to manage VSCode session as part of session capability\n */\nexport interface VSCodeOptions {\n    /**\n     * Path to custom VSCode installation\n     */\n    binary?: string\n    /**\n     * Define the directory to the extension you want to test\n     * @required\n     */\n    extensionPath: string\n    /**\n     * Define custom user settings to be applied to VSCode\n     */\n    userSettings?: Record<string, number | string | object | boolean>\n    /**\n     * Opens VSCode for a specific workspace\n     */\n    workspacePath?: string\n    /**\n     * Opens VSCode with a specific file opened\n     */\n    filePath?: string\n    /**\n     * Additional start-up arguments as object, e.g.\n     * ```\n     * vscodeArgs: { fooBar: true, 'bar-foo': '/foobar' }\n     * ```\n     * will be passed in as:\n     * ```\n     * --foo-bar --fooBar --bar-foo=/foobar\n     * ```\n     */\n    vscodeArgs?: ArgsParams\n    /**\n     * If set to true, service logs VSCode output from the extension host\n     * and console API\n     *\n     * @default `true`\n     */\n    verboseLogging?: boolean\n    /**\n     * VSCode API proxy configurations\n     */\n    vscodeProxyOptions?: Partial<VSCodeProxyOptions>\n}\n\nexport interface WDIOLogs {\n    level: string\n    message: string\n    source: string\n    timestamp: number\n}\n\nexport interface RemoteCommand {\n    id: number\n    fn: string\n    params: any[]\n}\n\nexport interface RemoteResponse {\n    id: number\n    result: any,\n    error?: string\n}\n\nexport type PendingMessageResolver = (error: string | undefined, result: any) => void\n"]}